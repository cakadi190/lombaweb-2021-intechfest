@mixin button-custom-variant(
  $background: #fff,
  $color-name: 'default'
) {
  @if
    $color-name == 'light' OR
    $color-name == 'warning' OR
    $color-name == 'link'  {
    color: $dark;
  } @else {
    color: $white;
  }

  &:hover, &:focus {
    @if $color-name == 'warning' OR
    $color-name == 'info' OR
    $color-name == 'success' {
      color: $white;
    }
  }
}

@mixin button-custom-outline-variant(
  $background: #fff,
  $color-name: 'default'
) {
  @if $color-name == 'light' {
    color: $dark;
  } @else {
    color: $background
  }

  &:hover, &:focus {
    @if $color-name == 'warning' OR
    $color-name == 'info' OR
    $color-name == 'success' {
      color: $white;
    }
  }
}

@mixin button-custom-dim-variant(
  $background: #fff,
  $color-name: 'default',
  $border: $background,
  $hover-background: darken($background, 7.5%),
  $hover-border: darken($background, 10%),
  $active-background: darken($background, 10%),
  $active-border: darken($background, 12.5%)
) {
  background: rgba($background, .1);
  border-color: transparent;

  @if
    $color-name == 'light' OR
    $color-name == 'medium' OR
    $color-name == 'link' {
    color: $dark;
  } @else {
    color: $background;
  }

  @include hover() {
    // @debug "#{$color-name == 'warning'} #{$color-name}";
    @if $color-name == 'warning' {
      color: $white;
    } @else {
      color: color-yiq($hover-background);
    }
    @include gradient-bg($hover-background);
    border-color: $hover-border;
  }

  &:focus,
  &.focus {
    @if $color-name == 'warning' {
      color: $white;
    } @else {
      color: color-yiq($hover-background);
    }
    @include gradient-bg($hover-background);
    border-color: $hover-border;
    @if $enable-shadows {
      @include box-shadow($btn-box-shadow, 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), .5));
    } @else {
      // Avoid using mixin so we can pass custom focus shadow properly
      box-shadow: 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
    }
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: color-yiq($background);
    background-color: $background;
    border-color: $border;
    // Remove CSS gradients if they're enabled
    @if $enable-gradients {
      background-image: none;
    }
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-yiq($active-background);
    background-color: $active-background;
    @if $enable-gradients {
      background-image: none; // Remove the gradient for the pressed/active state
    }
    border-color: $active-border;

    &:focus {
      @if $enable-shadows and $btn-active-box-shadow != none {
        @include box-shadow($btn-active-box-shadow, 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), .5));
      } @else {
        // Avoid using mixin so we can pass custom focus shadow properly
        box-shadow: 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
      }
    }
  }
}
